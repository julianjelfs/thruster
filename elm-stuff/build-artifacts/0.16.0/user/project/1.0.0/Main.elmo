Elm.Main = Elm.Main || {};
Elm.Main.make = function (_elm) {
   "use strict";
   _elm.Main = _elm.Main || {};
   if (_elm.Main.values) return _elm.Main.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $Effects = Elm.Effects.make(_elm),
   $Html = Elm.Html.make(_elm),
   $List = Elm.List.make(_elm),
   $Mailboxes = Elm.Mailboxes.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Messages = Elm.Messages.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $StartApp = Elm.StartApp.make(_elm),
   $State = Elm.State.make(_elm),
   $Task = Elm.Task.make(_elm),
   $Types = Elm.Types.make(_elm),
   $View = Elm.View.make(_elm);
   var _op = {};
   var outboundSocket = Elm.Native.Port.make(_elm).outboundSignal("outboundSocket",
   function (v) {
      return {messageType: v.messageType,payload: v.payload};
   },
   $Mailboxes.outboundSocketMailbox.signal);
   var init = {ctor: "_Tuple2"
              ,_0: $Types.initialModel($Mailboxes.outboundSocketMailbox.address)
              ,_1: $Effects.none};
   var app = $StartApp.start({init: init
                             ,inputs: _U.list([])
                             ,update: $State.update
                             ,view: $View.view});
   var main = app.html;
   var runner = Elm.Native.Task.make(_elm).performSignal("runner",
   app.tasks);
   return _elm.Main.values = {_op: _op
                             ,init: init
                             ,app: app
                             ,main: main};
};