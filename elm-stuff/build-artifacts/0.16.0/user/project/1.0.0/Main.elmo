Elm.Main = Elm.Main || {};
Elm.Main.make = function (_elm) {
   "use strict";
   _elm.Main = _elm.Main || {};
   if (_elm.Main.values) return _elm.Main.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $Effects = Elm.Effects.make(_elm),
   $Html = Elm.Html.make(_elm),
   $List = Elm.List.make(_elm),
   $Mailboxes = Elm.Mailboxes.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Messages = Elm.Messages.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $StartApp = Elm.StartApp.make(_elm),
   $State = Elm.State.make(_elm),
   $Task = Elm.Task.make(_elm),
   $Time = Elm.Time.make(_elm),
   $Types = Elm.Types.make(_elm),
   $View = Elm.View.make(_elm),
   $Window = Elm.Window.make(_elm);
   var _op = {};
   var screenSizeSignal = A2($Signal.map,
   $Types.ScreenSizeChanged,
   $Window.dimensions);
   var initialWindowSize = Elm.Native.Port.make(_elm).inbound("initialWindowSize",
   "( Int, Int )",
   function (v) {
      return typeof v === "object" && v instanceof Array ? {ctor: "_Tuple2"
                                                           ,_0: typeof v[0] === "number" && isFinite(v[0]) && Math.floor(v[0]) === v[0] ? v[0] : _U.badPort("an integer",
                                                           v[0])
                                                           ,_1: typeof v[1] === "number" && isFinite(v[1]) && Math.floor(v[1]) === v[1] ? v[1] : _U.badPort("an integer",
                                                           v[1])} : _U.badPort("an array",v);
   });
   var inboundSocket = Elm.Native.Port.make(_elm).inboundSignal("inboundSocket",
   "Messages.Message",
   function (v) {
      return typeof v === "object" && "messageType" in v && "payload" in v ? {_: {}
                                                                             ,messageType: typeof v.messageType === "number" && isFinite(v.messageType) && Math.floor(v.messageType) === v.messageType ? v.messageType : _U.badPort("an integer",
                                                                             v.messageType)
                                                                             ,payload: v.payload} : _U.badPort("an object with fields `messageType`, `payload`",
      v);
   });
   var inboundSocketSignal = A2($Signal.map,
   $Types.InboundMessage,
   $Time.timestamp(inboundSocket));
   var outboundSocket = Elm.Native.Port.make(_elm).outboundSignal("outboundSocket",
   function (v) {
      return {messageType: v.messageType,payload: v.payload};
   },
   $Mailboxes.outboundSocketMailbox.signal);
   var init = {ctor: "_Tuple2"
              ,_0: A2($Types.initialModel,
              initialWindowSize,
              $Mailboxes.outboundSocketMailbox.address)
              ,_1: $Effects.none};
   var app = $StartApp.start({init: init
                             ,inputs: _U.list([inboundSocketSignal,screenSizeSignal])
                             ,update: $State.update
                             ,view: $View.view});
   var main = app.html;
   var runner = Elm.Native.Task.make(_elm).performSignal("runner",
   app.tasks);
   return _elm.Main.values = {_op: _op
                             ,init: init
                             ,app: app
                             ,main: main
                             ,inboundSocketSignal: inboundSocketSignal
                             ,screenSizeSignal: screenSizeSignal};
};