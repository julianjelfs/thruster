Elm.Types = Elm.Types || {};
Elm.Types.make = function (_elm) {
   "use strict";
   _elm.Types = _elm.Types || {};
   if (_elm.Types.values) return _elm.Types.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Agents = Elm.Agents.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $Join$Types = Elm.Join.Types.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Messages = Elm.Messages.make(_elm),
   $Player$Types = Elm.Player.Types.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $Time = Elm.Time.make(_elm);
   var _op = {};
   var initialModel = F2(function (screenSize,address) {
      return {join: $Join$Types.initialModel(address)
             ,joined: false
             ,joinedAt: $Maybe.Nothing
             ,screen: screenSize
             ,me: $Maybe.Nothing
             ,players: _U.list([])
             ,asteroids: _U.list([])};
   });
   var Model = F7(function (a,b,c,d,e,f,g) {
      return {join: a
             ,joined: b
             ,joinedAt: c
             ,screen: d
             ,me: e
             ,players: f
             ,asteroids: g};
   });
   var ScreenSizeChanged = function (a) {
      return {ctor: "ScreenSizeChanged",_0: a};
   };
   var InboundMessage = function (a) {
      return {ctor: "InboundMessage",_0: a};
   };
   var PlayerAction = function (a) {
      return {ctor: "PlayerAction",_0: a};
   };
   var JoinAction = function (a) {
      return {ctor: "JoinAction",_0: a};
   };
   return _elm.Types.values = {_op: _op
                              ,JoinAction: JoinAction
                              ,PlayerAction: PlayerAction
                              ,InboundMessage: InboundMessage
                              ,ScreenSizeChanged: ScreenSizeChanged
                              ,Model: Model
                              ,initialModel: initialModel};
};