Elm.State = Elm.State || {};
Elm.State.make = function (_elm) {
   "use strict";
   _elm.State = _elm.State || {};
   if (_elm.State.values) return _elm.State.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Agents = Elm.Agents.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $Effects = Elm.Effects.make(_elm),
   $Join$State = Elm.Join.State.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Messages = Elm.Messages.make(_elm),
   $Player$State = Elm.Player.State.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $Types = Elm.Types.make(_elm);
   var _op = {};
   var update = F2(function (action,model) {
      var _p0 = action;
      switch (_p0.ctor)
      {case "ScreenSizeChanged": return {ctor: "_Tuple2"
                                        ,_0: _U.update(model,
                                        {screen: A2($Debug.log,"screen size: ",_p0._0)})
                                        ,_1: $Effects.none};
         case "InboundMessage": var _p5 = _p0._0._1;
           if (_U.eq(_p5.messageType,$Messages.messageTypes.welcome)) {
                 var maybeWm = $Messages.welcomeMessage(_p5);
                 var _p1 = maybeWm;
                 if (_p1.ctor === "Just") {
                       var _p2 = _p1._0;
                       return {ctor: "_Tuple2"
                              ,_0: _U.update(model,
                              {joined: true
                              ,joinedAt: $Maybe.Just(_p0._0._0)
                              ,me: $Maybe.Just(_p2.me)
                              ,players: _p2.players
                              ,asteroids: _p2.asteroids})
                              ,_1: $Effects.none};
                    } else {
                       return {ctor: "_Tuple2",_0: model,_1: $Effects.none};
                    }
              } else if (_U.eq(_p5.messageType,$Messages.messageTypes.delta))
              {
                    var maybeDelta = $Messages.deltaMessage(_p5);
                    var _p3 = maybeDelta;
                    if (_p3.ctor === "Just") {
                          var _p4 = _p3._0;
                          return {ctor: "_Tuple2"
                                 ,_0: _U.update(model,
                                 {players: _p4.players,asteroids: _p4.asteroids})
                                 ,_1: $Effects.none};
                       } else {
                          return {ctor: "_Tuple2",_0: model,_1: $Effects.none};
                       }
                 } else return {ctor: "_Tuple2",_0: model,_1: $Effects.none};
         case "PlayerAction": var me = A2($Maybe.withDefault,
           $Agents.nullPlayer,
           model.me);
           var _p6 = A2($Player$State.update,_p0._0,me);
           var updated = _p6._0;
           var fx = _p6._1;
           return {ctor: "_Tuple2"
                  ,_0: _U.update(model,{me: $Maybe.Just(updated)})
                  ,_1: A2($Effects.map,$Types.PlayerAction,fx)};
         default: var _p7 = A2($Join$State.update,_p0._0,model.join);
           var updated = _p7._0;
           var fx = _p7._1;
           return {ctor: "_Tuple2"
                  ,_0: _U.update(model,{join: updated})
                  ,_1: A2($Effects.map,$Types.JoinAction,fx)};}
   });
   return _elm.State.values = {_op: _op,update: update};
};