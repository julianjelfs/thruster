Elm.State = Elm.State || {};
Elm.State.make = function (_elm) {
   "use strict";
   _elm.State = _elm.State || {};
   if (_elm.State.values) return _elm.State.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $Effects = Elm.Effects.make(_elm),
   $Join$State = Elm.Join.State.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Messages = Elm.Messages.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $Types = Elm.Types.make(_elm);
   var _op = {};
   var update = F2(function (action,model) {
      var _p0 = action;
      switch (_p0.ctor)
      {case "ScreenSizeChanged": return {ctor: "_Tuple2"
                                        ,_0: _U.update(model,
                                        {screen: A2($Debug.log,"screen size: ",_p0._0)})
                                        ,_1: $Effects.none};
         case "InboundMessage": var _p1 = _p0._0._1;
           return _U.eq(_p1.messageType,
           $Messages.messageTypes.welcome) ? {ctor: "_Tuple2"
                                             ,_0: _U.update(model,
                                             {joined: true,joinedAt: $Maybe.Just(_p0._0._0)})
                                             ,_1: $Effects.none} : _U.eq(_p1.messageType,
           $Messages.messageTypes.delta) ? {ctor: "_Tuple2"
                                           ,_0: model
                                           ,_1: $Effects.none} : {ctor: "_Tuple2"
                                                                 ,_0: model
                                                                 ,_1: $Effects.none};
         default: var _p2 = A2($Join$State.update,_p0._0,model.join);
           var updated = _p2._0;
           var fx = _p2._1;
           return {ctor: "_Tuple2"
                  ,_0: _U.update(model,{join: updated})
                  ,_1: A2($Effects.map,$Types.JoinAction,fx)};}
   });
   return _elm.State.values = {_op: _op,update: update};
};